
/* global __http, VM, __usr, nil, vm */

var Desktop = function () {
    var T = this;
    var _ = $usr;
    T.hotkeys = [];
    T._keys = [];
    T.wintrack = [];

    var timer = null;
    var w = 0;
    var f = 0;
    var pause = false;

    T.pause = function () {
        pause = true;
    };

    T.resume = function () {
        pause = false;
    };

    T.procHotkey = function (c) {
        if (pause) {
            return;
        }
        for (var i = 0; i < T.hotkeys.length; i++) {
            if (T.hotkeys[i].id === c) {
                T.hotkeys[i].cb(T.hotkeys[i].param);
                break;
            }
        }
    };

    T.prockey = function (c) {
        if (pause) {
            return;
        }
        for (var i = 0; i < T._keys.length; i++) {
            if (T._keys[i].id === c) {
                T._keys[i].cb(T._keys[i].param);
                break;
            }
        }
    };

    T.getIdle = function () {
        return _.idle();
    };

    T.name = function () {
        return _.name();
    };

    T.sendkey = function (k) {
        if (pause) {
            return;
        }
        return _.sendkey(k);
    };

    T.toggleMonitor = function (e) {
        if (e) {
            _.toggleMonitor(1);
        } else {
            _.toggleMonitor(0);
        }
    };
    T.screenshot = function (f, cb) {
        if (typeof cb === "undefined") {
            cb = nil;
        }
        var i = _.screenshot(f);
        if (i === 1) {
            cb();
        }
    };

    // listens for a specific key
    T.key = function (c, cb, param) {
        var k = {};
        k.id = c;
        k.cb = cb;
        k.param = param || {};
        if (parseInt(_.key(k.id, function (e) {
            T.prockey(e);
        })) === 1) {
            T._keys.push(k);
        }
    };

    // listens for all keys
    T.keys = function (cb) {
        return _.keys(function (e, s) {
            cb(parseInt(e), parseInt(s));
        });
    };

    T.lock = function () {
        _.lock();
        return true;
    };

    // stop listening for keys, (*) for all
    T.stopKeys = function (e) {
        return parseInt(_.nokeys(e));
    };

    T.recordKeys = function (stop, cb, press) {
        if (typeof press === "undefined") {
            press = nil;
        }
//        console.log("recording, stopper: " + stop);
        var buf = [];
        setTimeout(function () {
            var i = T.keys(function (e, shift) {
                var E = e;
                console.log("key: " + e + " shift:" + shift);
                switch (e) {
                    case 48:
                    case 96:
                        e = "0";
                        break;
                    case 49:
                    case 97:
                        e = "1";
                        break;

                    case 50:
                    case 98:
                        e = "2";
                        break;

                    case 51:
                    case 99:
                        e = "3";
                        break;

                    case 52:
                    case 100:
                        e = "4";
                        break;

                    case 53:
                    case 101:
                        e = "5";
                        break;

                    case 54:
                    case 102:
                        e = "6";
                        break;

                    case 54:
                    case 103:
                        e = "7";
                        break;

                    case 55:
                    case 104:
                        e = "8";
                        break;

                    case 56:
                    case 105:
                        e = "9";
                        break;
                    case 16:
                    case 27:
                    case 20:
                    case 40:
                        break;
                    case 106:
                        e = "*";
                        break;
                    case 107:
                        e = "+";
                        break;
                    case 110:
                        e = ".";
                        break;
                    case 111:
                        e = "/";
                        break;
                    case 8:
                        if (buf.length > 0) {
                            buf.pop();
                        }
                        break;
                    case 32:
                        e = ' ';
                        break;
                    case 13:
                        e = '{ENTER}';
                        break;
                    case 9:
                        e = '{TAB}';
                        break;
                    case 222:
                        e = 'i';
                        break;
                    case 186:
                        e = 'ş';
                        break;
                    case 219:
                        e = 'ğ';
                        break;
                    case 220:
                        e = 'ç';
                        break;
                    case 191:
                        e = 'ö';
                    case 190:
                        e = ".";
                        break;
                    case 223:
                        e = "*";
                        break;
                    default:
                        e = String.fromCharCode((96 <= e && e <= 105) ? e - 48 : e).toLowerCase($host.locale);
                }
                if (parseInt(shift) === 1) {
                    switch (e) {
                        case "1":
                            e = "!";
                            break;
                        case "2":
                            e = "'";
                            break;
                        case "3":
                            e = "^";
                            break;
                        case "4":
                            e = "+";
                            break;
                        case "5":
                            e = "%";
                            break;
                        case "6":
                            e = "&";
                            break;
                        case "7":
                            e = "/";
                            break;
                        case "8":
                            e = "(";
                            break;
                        case "9":
                            e = ")";
                            break;
                        case "0":
                            e = "=";
                            break;
                        case "*":
                            e = '?';
                            break;
                        default:
                            e = e.toString().toLocaleUpperCase($host.locale);
                            break;
                    }
                }
                if (typeof e === "string") {
                    if (e.length === 1 || e.indexOf('{') > -1) {
                        press(e);
                        buf.push(e);
                    }
                }
                if (E === stop) {
                    T.stopKeys(i);
                    cb(buf.join(""));
                    buf = [];
                    return;
                }
            });
        }, 250);
    };

    T.hotkey = function (c, cb, param) {
        var hk = {};
        hk.id = random(9999);
        hk.cb = cb;
        hk.param = param || {};
        if (parseInt(_.hotkey(hk.id, c.ignorelastDelimiter('+'), c.lastDelimiter('+'), function (e) {
            T.procHotkey(e);
        })) === 1) {
            T.hotkeys.push(hk);
        }
    };

    T.getForegroundWindow = function () {
        return _.getActiveWin();
    };

    T.getCurrentApp = function () {
        return JSON.parse(_.getActiveApp());
    };

    vm.release(function () {
        T.hotkeys = [];
    });

    T.onEvent = function (cb) {
        _.onEvent(function (c) {
            cb(c);
        });
    };

    T.onMessage = function (cb) {
        _.onMessage(function (m) {
            cb(m);
        });
    };

    T.onWindowChanged = function (cb) {
        if (timer === null) {
            timer = setInterval(function () {
                var c = T.getForegroundWindow();
                if (c <= 0) {
                    return;
                }
                if (c !== w) {
                    w = c;
                    cb(T.getCurrentApp());
                } else {
                    var F = _.isFullScreen(c);
                    if (f !== F) {
                        cb(T.getCurrentApp());
                        f = F;
                    }
                }
            }, 25);
        }
        T.wintrack.push(cb);
    };
};


