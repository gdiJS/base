unit TjsRuntime;

interface

{$TYPEINFO ON}
{$METHODINFO ON}
{$RTTI EXPLICIT METHODS([vcPublic, vcProtected, vcPublished]) PROPERTIES([vcPublic, vcProtected, vcPublished]) FIELDS([vcPublic, vcProtected, vcPublished])}

uses
  Winapi.Windows, v8, classes, sysutils, xsuperobject, JSNatives, jsfilesystem;

type
  TjsRuntime = class
    constructor create(const scriptPath: string = '');
    destructor free;
  public
    log: TStringList;
    filename: string;
    FEngine: Tv8Engine;
    procedure reset;
    procedure start;
    procedure stop;
    procedure processEvent(eid: integer; const sparam: string = ''; const iparam: integer = 0);
    procedure ExecFromFile(fn: string);
    procedure Eval(code: widestring);
    function ExtractBoot: AnsiString;
  private
    active: Boolean;
    queue:array of widestring;
    console: Tv8ObjectTemplate;
    disk: Tv8ObjectTemplate;
    fs: Tv8ObjectTemplate;
    http: Tv8ObjectTemplate;
    sec: Tv8ObjectTemplate;
    db: Tv8ObjectTemplate;
    serial: Tv8ObjectTemplate;
    vm: Tv8ObjectTemplate;
    proc: Tv8ObjectTemplate;
    hw: Tv8ObjectTemplate;
    usr: Tv8ObjectTemplate;
    tcp: Tv8ObjectTemplate;
    bass: Tv8ObjectTemplate;
    dde: Tv8ObjectTemplate;
    tts: Tv8ObjectTemplate;
    udp: Tv8ObjectTemplate;
    os: Tv8ObjectTemplate;
    procedure CreateNatives;
    procedure KillNatives;
  end;

implementation

uses
  entrypoint, psyapi;

procedure TJSEngine.Eval(code: widestring);
var
  err: string;
begin
  err := FEngine.Eval(code);
  if err <> '' then
    errlog.Add(err);
end;

procedure TJSEngine.ExecFromFile(fn: string);
var
  c: TStringList;
  r: string;
begin
  if not FileExists(fn) then
    exit;

  c := TStringList.create;
  c.LoadFromFile(fn);
  r := (FEngine.Eval(c.Text));
  //processEvent(7, r);
  if r <> '' then
    errlog.Add(r);
  r := '';
  c.free;
end;

procedure TJSEngine.reset;
begin
  setlength(queue,0);
  log.Clear;
  stop;
  Sleep(1);
  start;
end;

procedure TJSEngine.processEvent(eid: integer; const sparam: string = ''; const iparam: integer = 0);
begin
  case eid of
    1:
      _SetDevMsg(true, @FEngine);
    2:
      _SetDevMsg(false, @FEngine);
    3:
      _SetWinMsg(sparam, @FEngine);
    4:
      _NotifyHotkey(iparam, @FEngine);
    5:
      _Notifykey(iparam, @FEngine);
    6:
      _Notifykeys(iparam, sparam, @FEngine);
    7:
      _DebugStr(sparam, @FEngine);
    8:
      _Audstate(iparam, @FEngine);
    9:
      _ipcMessage(sparam, @FEngine);
    10:
      _OsEvent(iparam, @FEngine);
    11:
      __DebugStr(sparam, @FEngine);
    12:
      _fchange(sparam, @FEngine);
    13:
     // _BattEvent(iparam, @Fengine);



  end;
end;

function TJSEngine.ExtractBoot: AnsiString;
var
  ResHandle: HRSRC;
  hGlob: THandle;
  thestring: AnsiString;
  eu: PAnsiChar;
begin
  ResHandle := FindResource(hInstance, 'boot', RT_RCDATA);
  hGlob := LoadResource(hInstance, ResHandle);
  eu := LockResource(hGlob);
  thestring := eu;
  UnlockResource(hGlob);
  result := thestring;
end;

procedure TJSEngine.CreateNatives;
var
  i: integer;
  ptmp: string;
  boot: Tstringlist;
  RStream: TResourceStream;
  err: string;
begin
  console := Tv8ObjectTemplate.create(1);
  console.AddMethod('log', console_log, nil);
  FEngine.GlobalObject.SetObject('$c', console.CreateInstance(nil));

  udp := Tv8ObjectTemplate.create(3);
  udp.AddMethod('send', _udpSend, nil);
  udp.AddMethod('listen', _udpListen, nil);
  udp.AddMethod('stop', _udpkill, nil);
  FEngine.GlobalObject.SetObject('$udp', udp.CreateInstance(nil));

  fs := Tv8ObjectTemplate.create(5);
  fs.AddMethod('read', _readfile, nil);
  fs.AddMethod('_write', _filewrite, nil);
  fs.AddMethod('_browse', _browse, nil);
  fs.AddMethod('exists', _fileExists, nil);
  fs.AddMethod('mkdir', _dirCreate, nil);
  fs.AddMethod('append', _fileAppend, nil);

  FEngine.GlobalObject.SetObject('fs', fs.CreateInstance(nil));

  http := Tv8ObjectTemplate.create(4);
  http.AddMethod('get', _httpget, nil);
  http.AddMethod('post', _httpPost, nil);

  FEngine.GlobalObject.SetObject('http', http.CreateInstance(nil));

  disk := Tv8ObjectTemplate.create(3);
  disk.AddMethod('enum', _disklist, nil);
    // disk.AddMethod('size', _disksize, nil);
    // disk.AddMethod('free', _diskfree, nil);

  FEngine.GlobalObject.SetObject('$disk', disk.CreateInstance(nil));

  sec := Tv8ObjectTemplate.create(3);
  sec.AddMethod('md5', _md5, nil);
  sec.AddMethod('crc', _crc32, nil);
  sec.AddMethod('sha1', _sha1, nil);
  FEngine.GlobalObject.SetObject('sec', sec.CreateInstance(nil));

  db := Tv8ObjectTemplate.create(3);
  db.AddMethod('open', _dbopen, nil);
  db.AddMethod('close', _dbclose, nil);
  db.AddMethod('query', _dbquery, nil);
  db.AddMethod('exec', _dbexec, nil);
  db.AddMethod('queryEx', _dbqueryEx, nil);
  FEngine.GlobalObject.SetObject('$sqlite', db.CreateInstance(nil));

  FEngine.RegisterNativeFunction('setTimeout', _setTimeout, nil);
  FEngine.RegisterNativeFunction('setInterval', _setInterval, nil);
  FEngine.RegisterNativeFunction('clearTimeout', _clearTimeout, nil);
  FEngine.RegisterNativeFunction('clearInterval', _clearInterval, nil);

  serial := Tv8ObjectTemplate.create(5);
  serial.AddMethod('open', _portopen, nil);
  serial.AddMethod('close', _portclose, nil);
  serial.AddMethod('read', _portread, nil);
  serial.AddMethod('write', _portwrite, nil);
  serial.AddMethod('enum', _portenum, nil);

  FEngine.GlobalObject.SetObject('$serial', serial.CreateInstance(nil));

  vm := Tv8ObjectTemplate.create(5);
  vm.AddMethod('release', _release, nil);
  vm.AddMethod('message', _GetWinMsg, nil);
  vm.AddMethod('debug', _RegDebug, nil);
  vm.AddMethod('end', _Halt, nil);
  vm.AddMethod('log', _WriteDebug, nil);
  vm.AddMethod('error', _RegEDebug, nil);
  vm.AddMethod('update', _RegFchange, nil);
  vm.AddMethod('extend', _LoadExtension, nil);

  FEngine.GlobalObject.SetObject('vm', vm.CreateInstance(nil));

  dde := Tv8ObjectTemplate.create(2);
  dde.AddMethod('find', _findwindow, nil);
  dde.AddMethod('send', _sendstring, nil);
  FEngine.GlobalObject.SetObject('$dde', dde.CreateInstance(nil));

  proc := Tv8ObjectTemplate.create(5);
  proc.AddMethod('create', _proccreate, nil);
  proc.AddMethod('ping', _procping, nil);
  proc.AddMethod('release', _procRelease, nil);
  proc.AddMethod('current', _procInfo, nil);
  proc.AddMethod('list', _procList, nil);
  proc.AddMethod('pipe', _procPipe, nil);

  FEngine.GlobalObject.SetObject('$proc', proc.CreateInstance(nil));

  hw := Tv8ObjectTemplate.create(2);
  hw.AddMethod('list', _hwlist, nil);
  hw.AddMethod('wlan', _wlscan, nil);
  FEngine.GlobalObject.SetObject('$hw', hw.CreateInstance(nil));

  usr := Tv8ObjectTemplate.create(7);
  usr.AddMethod('key', _SetKey, nil);
  usr.AddMethod('keys', _SetKeys, nil);
  usr.AddMethod('nokeys', _unSetKeys, nil);
  usr.AddMethod('hotkey', _SetHotkey, nil);
  usr.AddMethod('idle', _GetIdle, nil);
  usr.AddMethod('name', _GetUserName, nil);
  usr.AddMethod('sendkey', _SendKeys, nil);
  usr.AddMethod('screenshot', _ScreenShot, nil);
  usr.AddMethod('resolution', _GetResolution, nil);
  usr.AddMethod('getActiveApp', _GetCurrentApp, nil);
  usr.AddMethod('getActiveWin', _GetCurrentWin, nil);
  usr.AddMethod('isFullScreen', _IsFullscreen, nil);

    // usr.AddMethod('getclip', _ScreenShot, nil);
    // usr.AddMethod('setclip', _ScreenShot, nil);
    // usr.AddMethod('saveclip', _ScreenShot, nil);

  FEngine.GlobalObject.SetObject('$usr', usr.CreateInstance(nil));

  bass := Tv8ObjectTemplate.create(6);
  bass.AddMethod('init', _audstart, nil);
  bass.AddMethod('kill', _audstop, nil);
  bass.AddMethod('sload', _audload, nil);
  bass.AddMethod('splay', _audplay, nil);
  bass.AddMethod('playd', _audspeech, nil);
  bass.AddMethod('stream', _audstream, nil);
    // bass.AddMethod('volume', _audstream, nil);
  bass.AddMethod('monitor', _RegAudio, nil);

  FEngine.GlobalObject.SetObject('$audio', bass.CreateInstance(nil));

  tcp := Tv8ObjectTemplate.create(4);
  tcp.AddMethod('listen', _tcplisten, nil);
    // start server, register receiver callback
  tcp.AddMethod('write', _tcpwrite, nil); // send text
  tcp.AddMethod('kick', _tcpkick, nil); // close connection
  tcp.AddMethod('close', _tcpclose, nil); // shutdown server

  FEngine.GlobalObject.SetObject('$tcp', tcp.CreateInstance(nil));

  tts := Tv8ObjectTemplate.create(2);
  tts.AddMethod('render', _TTSSpeak, nil);
  FEngine.GlobalObject.SetObject('$tts', tts.CreateInstance(nil));

  os := Tv8ObjectTemplate.create(6);
  os.AddMethod('toggleMonitor', _ToggleMonitor, nil);
  os.AddMethod('onEvent', _RegOsEvent, nil);
  os.AddMethod('onMessage', _RegMessage, nil);
  os.AddMethod('lock', _Lock, nil);
  os.AddMethod('onDevice', _GetDevMsg, nil);
 //os.AddMethod('onBattery', _GetBattMsg, nil);
  FEngine.GlobalObject.SetObject('os', os.CreateInstance(nil));

  FEngine.RegisterNativeFunction('include', _include, nil);
  FEngine.RegisterNativeFunction('alert', _alert, nil);
  FEngine.RegisterNativeFunction('random', _random, nil);
  FEngine.RegisterNativeFunction('uptime', _Gettickcount, nil);
  FEngine.RegisterNativeFunction('iJSON', LoadJson, nil);
  FEngine.Eval('const $pid = ' + inttostr(GetCurrentProcessId) + ';');
  FEngine.Eval('const $handle = ' + inttostr(ahandle) + ';');
  FEngine.Eval('const $host = {"name":"' + makine + '", "user":"' + GetUserName + '", "path":' + quotedstr(makePath(ParamStr(0))) + ',"country":' + quotedstr((LocaleInfoEx(LOCALE_SISO3166CTRYNAME))) + ',"timezone":' + GetTimeZone + ',"locale":' + quotedstr(LocaleInfoEx(LOCALE_SNAME)) + '};');
  ptmp := 'const $params = [';
  for i := 0 to ParamCount do
  begin
    if i = 0 then
      Continue;
    ptmp := ptmp + quotedstr(ParamStr(i));
  end;
  ptmp := ptmp + '];';
  FEngine.Eval(ptmp);

 // RStream := TResourceStream.Create(HInstance, 'boot', RT_RCDATA);

 //   boot := Tstringlist.Create;
  //  boot.LoadFromStream(RStream);
  OutputDebugString(pchar('initializing'));
//    boot.LoadFromFile('packed.js');
  //OutputDebugStringA(Pansichar(ExtractBoot));
  err := FEngine.Eval(LoadFileToStr('boot.js'));
  if err <> '' then
    errlog.Add(err);
 // finally
//    boot.Free;
//  end;
  ptmp := #0;

  JSNatives.vm := @FEngine;
  JSNatives.log := @log;
  OutputDebugString(pchar('start'));
end;

procedure TJSEngine.KillNatives;
begin
  JSNatives.Jsterminate;
  console.free;
  fs.free;
  http.free;
  disk.free;
  proc.free;
  db.free;
  sec.free;
  serial.free;
  hw.free;
  usr.free;
  tcp.free;
  bass.free;
  dde.free;
  os.Free;
  tts.Free;
  vm.free;
end;

constructor TJSEngine.create(const scriptPath: string = '');
begin
  setlength(queue,0);
  self.filename := scriptPath;
  log := TStringList.create;

  if v8_init = 0 then
  begin
    raise Exception.create('Cannot initialize engine');
  end;

  FEngine := Tv8Engine.create; // create engine
  start;
end;

destructor TJSEngine.free;
begin
  stop;
  FEngine.free;
  v8.v8_cleanup;
  log.free;
end;

procedure TJSEngine.start;
begin
  FEngine.enter;
  CreateNatives;
  active := true;
  if filename <> '' then
    ExecFromFile(filename);
end;

procedure TJSEngine.stop;
begin
  active := false;
  KillNatives;
  FEngine.leave;
end;

end.

