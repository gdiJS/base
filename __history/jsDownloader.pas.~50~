unit JSDownloader;

interface

uses
  windows, System.Net.HttpClient, Web.HTTPApp, System.SysUtils, System.Classes,
  utils;

type
  Tdownload = record
    remote: string;
    local: string;
    mime: string;
    length: int64;
    downloaded: int64;
    response: integer;
    success: boolean;
  end;

type
  TDownloader = class
  private
    FHttpClient: THTTPClient;
    _onprogress: string;

    lastupdate: int64;
    lastsize: int64;

    CriticalSection: TRTLCriticalSection;

    procedure OnReceiveData(const Sender: TObject; AContentLength, AReadCount: Int64; var AAbort: Boolean);
  public
    constructor Create(const onprogress: string = '');
    destructor Destroy; override;
    function start(const URL, FileName: string): Tdownload;
  end;

implementation

uses
  entrypoint, wmipc;

constructor TDownloader.Create(const onprogress: string = '');
begin
  FHttpClient := THTTPClient.Create();
  _onprogress := onprogress;

  if _onprogress <> '' then
    FHttpClient.OnReceiveData := OnReceiveData;
end;

destructor TDownloader.Destroy;
begin
  FHttpClient.Free;
  inherited;
end;

procedure TDownloader.OnReceiveData(const Sender: TObject; AContentLength, AReadCount: Int64; var AAbort: Boolean);
var
  time: int64;
  took: integer;
  packet: int64;
begin
  took := (gettickcount64 - lastupdate);
  if (lastupdate > 0) and (took >= 1000) then
  begin
    lastupdate := gettickcount64;
    packet := AReadCount - lastsize;
    lastsize := AReadCount;

    wm_sendstringex(ahandle, ahandle, pwidechar('~eval=' + _onprogress + '({"read":' + inttostr(AReadCount) + ',"total":' + inttostr(AContentLength) + '});'));
  end;
end;

function TDownloader.start(const URL, FileName: string): Tdownload;
var
  FileStream: TFileStream;
  Response: IHTTPResponse;
begin
  result.success := false;
  FileStream := TFileStream.Create(FileName, fmCreate);
  try
    result.remote := URL;
    result.local := FileName;
    Response := FHttpClient.Get(URL, FileStream);
  finally
    result.response := Response.StatusCode;
    result.downloaded := FileStream.Size;
    result.length := Response.ContentLength;
    if result.length = result.downloaded then
      result.success := True;
    result.mime := Response.MimeType;
    FileStream.Free;
  end;
end;

end.

